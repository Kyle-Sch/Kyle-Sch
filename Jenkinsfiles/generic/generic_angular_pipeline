import java.util.regex.Matcher
import java.util.regex.Pattern

// Libraries
library 'reference-pipeline'
library 'fxg-reference-pipeline'


pipeline{

    // Agent
    agent { label 'docker' }

    environment {
        // Constants
        def snapshot = "SNAPSHOT"
        def PROD_SETTING_FILE_URL = "http://maven.ground.fedex.com/settings-fxg-scm.xml" // will change
        def NEXUS_SNAPSHOT_URL = "https://nexus.prod.cloud.fedex.com:8443/nexus/content/repositories/fxg-snapshots"
        def NEXUS_RELEASE_URL = "https://nexus.prod.cloud.fedex.com:8443/nexus/content/repositories/fxg-releases"
        def SNAPSHOT_REPO = "fxg-snapshots"
        def RELEASE_REPO = "fxg-releases"
        def UNIT_TESTS_PASSED = 1

        // def APPLICATION_NAME = "iss-sort-ui"
        // def APP_DIRECTORY = "sort-ui"
        // def GROUP_ID = "com.fedex.ground.sort"
        def PROXY = 'http://internet.proxy.fedex.com:3128'

        // Variables that will be filled in later
        def POM = ""
        def VERSION = ""
    }

    // parameters {
    //     choice(choices: 'SNAPSHOT\nRELEASE-CUT\nRELEASE', description: 'SNAPSHOT - For pushing TAR to snapshot repo, RELEASE-CUT - For pushing TAR to release repo, RELEASE - For deploying TAR to servers.', name: 'BUILD_TYPE')
    //     string(name: 'VERSION', defaultValue: "2.0.0", description: 'Version of the TAR file.')
    //     choice(choices: '-\nDEV\nQAS\nPRD', description: 'Target environment required only for RELEASE build type. DEV and QAS will be deployed from snapshot repo. PRD will be deployed from release repo.', name: 'TARGET')
    // }

    parameters {
        choice(name: 'MAKE', choices: 'SNAPSHOT\nRELEASE\nNOTHING', description: 'MAKE?')
        choice(name: 'DEPLOY', choices: 'NOTHING\nSNAPSHOT\nRELEASE', description: 'DEPLOY?')
        choice(name: 'DESTINATION', choices: 'DEV\nQAS\nPRD', description: 'DESTINATION?')
        string(name: 'VERSION', defaultValue: "2.0.0", description: 'Version of the TAR file.')
        gitParameter(name: 'XMLBRANCH', 
            branchFilter: 'origin/(.*)', 
            defaultValue: 'ONE_JOB_BUNDLE', 
            type: 'PT_BRANCH', 
            sortMode: 'ASCENDING',
            listSize: '10',
            useRepository: "${DEPLOYMENT_URL}"
        )
    }

    tools{
        nodejs 'NODEJS-12.0.0'
        // jdk 'JAVA_8'
        // maven 'Maven 3.3.9'
    } 

    stages{
        
        stage('Checkout for XMLBRANCH Parameter') {
			steps {
                dir("${WORKSPACE}") {
                    checkout([$class: 'GitSCM', branches: [[name: "${params.XMLBRANCH}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'ISS-1085', url: "${DEPLOYMENT_URL}"]]])
                }
                cleanWs()
            }
		}

        stage('Get Global Settings XML File') {
            steps {
                checkout changelog: false,
                    poll: false,
                    scm: [$class: 'GitSCM',
                        branches: [[name: '*/master']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: 'ISS-1085',
                             url: 'git@gitlab.prod.fedex.com:APP1085/universal-pipelines.git']]
                    ]
                stash includes: 'settings.xml', name: 'settings'
                stash includes: '*.sh', name: 'install_script'
                cleanWs()
            }
        }

        // stage("initialize") {
        //     steps {
        //         script{
        //             if (params.BUILD_TYPE == 'SNAPSHOT' && params.TARGET != '-') {
        //                 error("SNAPSHOT build type should not have a target environment.")
        //             }

        //             if (params.BUILD_TYPE == 'RELEASE' && params.TARGET == '-') {
        //                 error("RELEASE build type should have a target environment.")
        //             }
        //         }
        //         stash includes: '**/settings.xml', name: 'settings'
        //     }
        // }
        
        stage('Get Source') {
            steps {
                cleanWs()
                checkout changelog: true, 
                    poll: false, 
                    scm: [$class: 'GitSCM',
                        branches: [[name: "${BRANCH_NAME}"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: 'ISS-1085',
                             url: "${SOURCE_URL}"]]
                    ]
                // dir("${PROJECT_ROOT_FOLDER}") {
                //     script {
                //         POM = readMavenPom()
                //         VERSION = POM.getVersion()
                //         STORIED_VERSION = concatenateVersionNumberIfApplicatable(VERSION, BRANCHES_EXCLUDED_FROM_APPENDS, BRANCH_NAME)
                //     }
                // }
                stash name: 'source'
                cleanWs()

            }
        }

        stage('Get Deployment XMLs') {
            when {
                not {
                    equals expected: "NOTHING", actual: params.DEPLOY
                }       
            }

            steps {
                cleanWs()
                checkout changelog: false, 
                    poll: false, 
                    scm: [$class: 'GitSCM',
                        branches: [[name: "*/${params.XMLBRANCH}"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: 'ISS-1085',
                             url: "${DEPLOYMENT_URL}"]]
                    ]
                sh "cat ${ARTIFACT_ID}-${DESTINATION}-deployment.xml"
                stash name: 'deploy_XMLS'
                cleanWs()
            }
        }

        stage('Build Snapshot') {
            when {
                beforeAgent true
                equals expected: "SNAPSHOT", actual: params.MAKE
            }
            
            steps {
                cleanWs()
                unstash "source"
                dir("${PROJECT_ROOT_FOLDER}") {
                    unstash "settings"
                    sh """
                        npm --version
                        which npm
                        npm set proxy ${PROXY}

                        npm install -g @angular/cli@9.1.7
                        cd ${WORKSPACE}/${PROJECT_ROOT_FOLDER}
                        npm update
                        npm install
                        
                        cd ${WORKSPACE}/${PROJECT_ROOT_FOLDER}
                        pwd
                        ls -lrt
                        ng build --prod
                        ls -lrt 
                        cd ${PACKAGE_NAME}
                        ls -lrt 
                    """
                    stash includes : "**/${PACKAGE_NAME}/**", name : "app"
                }
                cleanWs()
            }
        }        
        
        stage('Upload Snapshot to Nexus') {
            when {
                equals expected: "SNAPSHOT", actual: params.MAKE
            }

            steps{
                cleanWs()
                unstash "settings"
                unstash "app"
                sh """
                    pwd && ls -ltra 
                """
                withMaven(jdk: 'JAVA_8', maven: 'Maven 3.3.9') {
                    sh """                      
                        tar -zcvf ${PACKAGE_NAME}-${params.VERSION}.tar ${PACKAGE_NAME}   
                        mvn deploy:deploy-file                      \
                            -s settings.xml                         \
                            -Durl=${NEXUS_SNAPSHOT_URL}             \
                            -DrepositoryId=${SNAPSHOT_REPO}         \
                            -Dfile=${PACKAGE_NAME}-${params.VERSION}.tar    \
                            -Dversion=${params.VERSION}-SNAPSHOT           \
                            -Dpackaging=tar \
                            -DgroupId=${GROUP_ID} \
                            -DartifactId=${ARTIFACT_ID} \
                            -DgeneratePom=false
                    """
                }
            }
        }

        stage('Pull Snapshot from Nexus') {
            when {
                anyOf{
                    equals expected: "RELEASE", actual: params.MAKE
                    equals expected: "SNAPSHOT", actual: params.DEPLOY
                }
            }

            steps {
                cleanWs()
                sh "pwd; ls -ltr"
                downloadNexusArtifact groupId: "${GROUP_ID}",
                            artifactId: "${ARTIFACT_ID}",
                            repo: "${SNAPSHOT_REPO}",
                            release: false,
                            version: "${params.VERSION}-SNAPSHOT",
                            extension: "tar"
                stash includes: "**.tar", name: "snapshot-tar"
                sh "pwd; ls -ltr"
                cleanWs()
            }
        }

       stage('Push ReleaseCut to Nexus') {
            when {
                equals expected: "RELEASE", actual: params.MAKE
            }

            steps {
                cleanWs()
                withMaven(jdk: 'JAVA_8', maven: 'Maven 3.3.9') {
                    unstash "source"
                    dir("${PROJECT_ROOT_FOLDER}"){
                        unstash "settings"
                        unstash "snapshot-tar"
                        sh "pwd; ls -ltr"
                        sh """
                            mv **.tar ${ARTIFACT_ID}-${params.VERSION}.tar
                            ls -ltr
                            mvn deploy:deploy-file \
                                -s settings.xml \
                                -Durl=${NEXUS_RELEASE_URL} \
                                -DrepositoryId=${RELEASE_REPO} \
                                -Dfile=${ARTIFACT_ID}-${params.VERSION}.tar \
                                -Dversion=${params.VERSION} \
                                -Dpackaging=tar \
                                -DgroupId=${GROUP_ID} \
                                -DartifactId=${ARTIFACT_ID} \
                                -DgeneratePom=false
                        """
                    }
                }
                cleanWs()
            }     
        }
        
        stage('Pull ReleaseCut from Nexus') {
            when {
                equals expected: "RELEASE", actual: params.DEPLOY
            }
            
            steps {
                cleanWs()
                downloadNexusArtifact groupId: "${GROUP_ID}",
                            artifactId: "${ARTIFACT_ID}",
                            repo: "${RELEASE_REPO}",
                            release: true,
                            version: "${params.VERSION}",
                            extension: "tar"
                stash includes: "**.tar", name: "release-tar"
                cleanWs()
            }
        }

        stage('DIY Notification for Production Deployment'){
            when {
                allOf {
                    equals expected: "PRD", actual: params.DESTINATION
                    not {
                        equals expected: "NOTHING", actual: params.DEPLOY
                    }
                }
            }

            steps {
                notification(train: 'uss')
                echo "Notification for ${PROJECT_NAME} deployment in Production"
            }
        }

        stage('Deploy Application') {
            when {
                not {
                    equals expected: "NOTHING", actual: params.DEPLOY
                }
            }
            
            steps {
                cleanWs()
                unstash "source"
                dir("${PROJECT_ROOT_FOLDER}") {
                    unstash "install_script"
                    unstash "settings"
                    unstash params.DEPLOY == "RELEASE" ? "release-tar" : "snapshot-tar"
                    withMaven(jdk: 'JAVA_8', maven: 'Maven 3.3.9') {
                        sshagent(credentials: ['DIY_SystemTeam_Master_SSH_Key']) {
                            sh "ls -ltr"
                            sh "tar -xvf **.tar"
                            sh "ls -ltr"
                            unstash "deploy_XMLS"
                            sh "ls -ltr"
                            sh "cat ${ARTIFACT_ID}-${DESTINATION}-deployment.xml"
                            sh "cd ../; if [[ ! -e xmldir ]] ; then  mkdir xmldir; fi;"
                            sh "ls -ltr; cp *xml ../xmldir/."
                            sh "ls -ltr ../xmldir/"
                            sh "if [[ ! -e xmldir ]] ; then  mkdir xmldir; fi;"
                            sh "ls -ltr; cp *xml xmldir/."
                            sh "ls -ltr xmldir/"
                            sh '''
                                ls -ltr ${PROJECT_ROOT_FOLDER}/${PACKAGE_NAME}/assets/scripts/
                                chmod 755 ${PROJECT_ROOT_FOLDER}/${PACKAGE_NAME}/assets/scripts/*.sh
                                while read LINE
                                do
                                    counter=`echo ${LINE} | grep "destination id" | wc -l`
                                    if [ ${counter} -gt 0 ]; then
                                        SERVERID=`echo ${LINE} |grep "destination id" | awk '{print $2}' | awk -F'"' '{print $2}'`
                                        HOST_AND_DIRECTORY=`echo ${LINE} |grep "hostAndDirectory" | awk '{print $3}' | perl -pi -e "s/hostAndDirectory=\\"//g" | perl -pi -e "s/\\"//g"`                              

                                        echo "######################### Deploying to ${SERVERID} ####################################"
                                        ls -la
                                        sed -i "s/hostname/${SERVERID}/g" ${PROJECT_ROOT_FOLDER}/${PACKAGE_NAME}/env.js
                                        sed -i "s/1.0.0/${VERSION}/g" ${PROJECT_ROOT_FOLDER}/${PACKAGE_NAME}/env.js
                                        scp -r -oStrictHostKeyChecking=no -oBatchMode=yes -oLogLevel=error -oUserKnownHostsFile=/dev/null ${PROJECT_ROOT_FOLDER}/${PACKAGE_NAME} oasis@${HOST_AND_DIRECTORY}
                                        
                                        echo "Done!"
                                    fi
                                done < ${ARTIFACT_ID}-${DESTINATION}-deployment.xml
                            '''
                            // sh "mvn scm.plugins:scm-archive-deployment:3.0.0:distribute -U -P=${params.DESTINATION} -s settings.xml"
                        }
                    }
                }
                cleanWs() 
            }
        }


        // stage("Deploy to PROD") {
        //     when { expression { return (params.BUILD_TYPE == 'RELEASE' && params.TARGET == 'PRD')} }
        //     agent any
        //     steps{
        //         sh "cd ${WORKSPACE}"
        //         unstash 'tar'
        //         sh "tar -xvf ${APPLICATION_NAME}-${params.VERSION}.tar"
        //         script{
        //             sshagent(credentials : ['DIY_SystemTeam_Master_SSH_Key']) {
        //             sh '''
        //                 chmod 755 ${WORKSPACE}/SortUI/sortUI/assets/scripts/*.sh
        //                 while read LINE
        //                     do
        //                         counter=`echo ${LINE} | grep "destination id" | wc -l`
        //                         if [ ${counter} -gt 0 ]; then
        //                             SERVERID=`echo ${LINE} |grep "destination id" | awk '{print $2}' | awk -F'"' '{print $2}'`
        //                             HOST_AND_DIRECTORY=`echo ${LINE} |grep "hostAndDirectory" | awk '{print $3}' | perl -pi -e "s/hostAndDirectory=\\"//g" | perl -pi -e "s/\\"//g"`

        //                             echo "######################### Deploying to ${SERVERID} ####################################"
        //                             ls -la
        //                             sed -i "s/hostname/${SERVERID}/g" ${WORKSPACE}/SortUI/sortUI/env.js
        //                             sed -i "s/1.0.0/${VERSION}/g" ${WORKSPACE}/SortUI/sortUI/env.js
        //                             scp -r -oStrictHostKeyChecking=no -oBatchMode=yes -oLogLevel=error -oUserKnownHostsFile=/dev/null SortUI/sortUI oasis@${HOST_AND_DIRECTORY}
                                    
        //                             echo "Done!"
        //                         fi  
        //                     done < ${WORKSPACE}/iss-sort-ui-${TARGET}-deployment.xml
        //                 '''
        //             }
        //         }
        //     }
        // }
    }
    
    post {
        always {
            cleanWs()
        }
    }
}
