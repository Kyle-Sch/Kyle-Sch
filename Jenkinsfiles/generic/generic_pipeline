/* 
USE CASES:
	1. Only build snapshot and push to nexus 
        ---> MAKE: Snapshot, DEPLOY: Nothing

	2. Build snapshot, push snapshot to nexus, pull snapshot from nexus, deploy 
        ---> MAKE: Snapshot, DEPLOY: Snapshot

	3. Build nothing, pull snapshot from nexus, deploy 
        ---> MAKE: Nothing, DEPLOY: Snapshot

	4. Build nothing, pull snapshot from nexus, push release to nexus, pull release from nexus, deploy 
        ---> MAKE: Release, DEPLOY: Release

    5. Build nothing, pull release from nexus, deploy 
        ---> MAKE: Nothing, DEPLOY: Release
*/

import java.util.regex.Matcher
import java.util.regex.Pattern

// Libraries
library 'reference-pipeline'
library 'generic-reference-pipeline'
library 'FOSS'

pipeline {

    agent { label 'dockernodes' }

    environment {
        // Constants
        def snapshot = "SNAPSHOT"
        def PROD_SETTING_FILE_URL = "http://maven.com/settings-scm.xml" 
        def NEXUS_SNAPSHOT_URL = "https://nexus.com:8443/nexus/content/repositories/snapshots"
        def NEXUS_RELEASE_URL = "https://nexus.com:8443/nexus/content/repositories/releases"
        def SNAPSHOT_REPO = "snapshots"
        def RELEASE_REPO = "releases"
        def UNIT_TESTS_PASSED = 1

        // Variables that will be filled in later
        def POM = ""
        def VERSION = ""
        def STORIED_VERSION = ""
        def nexusapp = "${NEXUS_NAME}"
        def nexusappid = "${nexusapp}"
		def fortifyappid = "${FORTIFY_NAME}"

    }
    
    parameters {
        choice(name: 'MAKE', choices: 'SNAPSHOT\nRELEASE\nNOTHING', description: 'MAKE?')
        choice(name: 'DEPLOY', choices: 'NOTHING\nSNAPSHOT\nRELEASE', description: 'DEPLOY?')
        choice(name: 'DESTINATION', choices: 'DEV\nQAS\nPRD', description: 'DESTINATION?')
        choice(name: 'DoQualityGates', choices: 'YES\nNO', description: 'DoQualityGates?')
        gitParameter(name: 'XMLBRANCH', 
            branchFilter: 'origin/(.*)', 
            defaultValue: 'ONE_JOB_BUNDLE', 
            type: 'PT_BRANCH', 
            sortMode: 'ASCENDING',
            listSize: '10',
            useRepository: "${DEPLOYMENT_URL}"
        )
    }

    stages {

        stage('Checkout for XMLBRANCH Parameter') {
			steps {
                dir("${WORKSPACE}") {
                    checkout([$class: 'GitSCM', branches: [[name: "${params.XMLBRANCH}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'MyKey', url: "${DEPLOYMENT_URL}"]]])
                }
                cleanWs()
            }
		}

        stage('Get Global Settings XML File') {
            steps {
                checkout changelog: false,
                    poll: false,
                    scm: [$class: 'GitSCM',
                        branches: [[name: '*/master']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: 'MyKey',
                             url: 'github.git']]
                    ]
                stash includes: 'settings.xml', name: 'settings'
                stash includes: 'FOSSMavenSettings.xml', name: 'FOSSsettings'
                stash includes: '*.sh', name: 'install_script'
                cleanWs()
            }
        }

        stage('Get Source') {
            steps {
                cleanWs()
                checkout changelog: true, 
                    poll: false, 
                    scm: [$class: 'GitSCM',
                        branches: [[name: "${BRANCH_NAME}"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: 'MyKey',
                             url: "${SOURCE_URL}"]]
                    ]
                dir("${PROJECT_ROOT_FOLDER}") {
                    script {
                        POM = readMavenPom()
                        VERSION = POM.getVersion()
                        STORIED_VERSION = concatenateVersionNumberIfApplicatable(VERSION, BRANCHES_EXCLUDED_FROM_APPENDS, BRANCH_NAME)
                    }
                }
                stash name: 'source'
                cleanWs()

            }
        }

        stage('Get Deployment XMLs') {
            when {
                not {
                    equals expected: "NOTHING", actual: params.DEPLOY
                }       
            }

            steps {
                cleanWs()
                checkout changelog: false, 
                    poll: false, 
                    scm: [$class: 'GitSCM',
                        branches: [[name: "*/${params.XMLBRANCH}"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: 'MyKey',
                             url: "${DEPLOYMENT_URL}"]]
                    ]
                stash name: 'deploy_XMLS'
                cleanWs()
            }
        }

        stage('Unit Testing') {
            when {
                allOf {
                    equals expected: "SNAPSHOT", actual: params.MAKE
                    equals expected: "YES", actual: params.DoQualityGates
                }
            }
            steps {
                cleanWs()
                unstash 'source'
                dir("${PROJECT_ROOT_FOLDER}") {
                    unstash 'settings'
        
                    withMaven(jdk: 'JAVA_8', maven: 'Maven 3.3.9') {
                        script { 
                            UNIT_TESTS_PASSED = sh(script: 'mvn clean test -s settings.xml -U', returnStatus: true)
                        }
                    }
                    stash name: 'target_dir', includes: 'target/**', allowEmpty: true
                    echo "Unit test exit code: ${UNIT_TESTS_PASSED}"
                }
                cleanWs()
            }
        }

        stage('Unit-Test Result Publishing') {
            when {
                allOf {
                    equals expected: "SNAPSHOT", actual: params.MAKE
                    equals expected: "YES", actual: params.DoQualityGates
                }
            }

            tools { jdk 'JAVA_8' }
            steps {
                cleanWs()
                unstash 'source'
                dir("${PROJECT_ROOT_FOLDER}") {
                    unstash 'target_dir'
                    sh "ls -ltr"
                    script {
                        def JACOCO_OUTPUT = jacoco changeBuildStatus: true, maximumBranchCoverage: '80', maximumClassCoverage: '80', maximumComplexityCoverage: '80', maximumInstructionCoverage: '80', maximumLineCoverage: '80', maximumMethodCoverage: '80'
                        echo "$JACOCO_OUTPUT"
                    }
                }
                script {
                    echo "${env.UNIT_TESTS_PASSED}"
                    if (env.UNIT_TESTS_PASSED?.equals("0")) {
                            if (env.BUILD_WITH_FAILING_TESTS == false) {
                                throw new Exception("Failed Unit tests, ending job")
                            } else {
                                currentBuild.result = "UNSTABLE"
                                echo "Unit tests failed, but configured to allow builds anyways"
                        }
                    }
                }
            }
        }
        
        stage('Cucumber Reports'){
            when {
                allOf {
                    equals expected: "SNAPSHOT", actual: params.MAKE
                    equals expected: "YES", actual: params.DoQualityGates
                }
            }
            steps{
                dir("${PROJECT_ROOT_FOLDER}") {
                echo "Executing the Cucumber Reports Stage"
                sh "ls -ltr"
                cucumber buildStatus: "SUCCESS",
                fileIncludePattern: "**/cucumber.json",
                jsonReportDirectory: 'Reports'
                }
           }
        }
        
        stage('Build Snapshot') {
            when {
                beforeAgent true
                equals expected: "SNAPSHOT", actual: params.MAKE
            }
            
            steps {
                cleanWs()
                withCredentials([
                    [ $class: 'UsernamePasswordMultiBinding', credentialsId: 'MyKey_SRC', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD' ]
                ]) {
                    unstash "source"
                    script {
                        dir("${PROJECT_ROOT_FOLDER}") {
                            unstash "settings"
                            unstash "FOSSsettings"
                            sh "pwd; ls -ltr"
                            withMaven(jdk: 'JAVA_8', maven: 'Maven 3.3.9') {
                                sh "mvn -B clean package verify dependency:tree -Dscope=runtime -DoutputFile=cicd-foss-dependencies.txt -Dmaven.test.skip=true -s FOSSMavenSettings.xml"
                            }
                            sh "pwd; ls -ltr"
                            dir("target") {
                                sh "pwd; ls -ltr"
                                stash includes: '*.jar', name: 'snapshot-jar', excludes: '*sources*'
                                sh "pwd; ls -ltr"
                            }
                            sh "pwd; ls -ltr"
                        }
                                            }
                }
            }
        }

        stage('sonarqube') {
            when {
                allOf {
                    equals expected: "SNAPSHOT", actual: params.MAKE
                    equals expected: "YES", actual: params.DoQualityGates
                }
            }
            
            steps {
                sh "pwd; ls -ltr ${NEXUS_ROOT_FOLDER}"
                dir("${NEXUS_ROOT_FOLDER}") {
                    sonarqube projectName: '${PROJECT_NAME}',
                            projectKey: '${PROJECT_NAME}',
                            projectVersion: "${VERSION}",
                            src: 'src/main',
                            binaries: 'target',
                            scmDisabled: 'false' ,
                            exclusions: 'src/test/*'
                }
            }
        }
                
         stage('CICD-FOSS') {
            when {
                allOf {
                    equals expected: "SNAPSHOT", actual: params.MAKE
                    equals expected: "YES", actual: params.DoQualityGates
                }
            }

             steps {
                 withCredentials([
                    [ $class: 'UsernamePasswordMultiBinding', credentialsId: 'MyKey_SRC', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD' ]
                ]) {
                    script {
                        echo "\u2705 \u2705 \u2705 Executing stage('NexusIQ') \u2705 \u2705 \u2705"
                        echo "App Version: ${VERSION}"
                        echo "PROJECT_NAME: ${PROJECT_NAME}"
                        echo "nexusapp:  ${nexusapp}"
                        echo "nexusappid:  ${nexusappid}"

                        nexusPolicyEvaluation iqApplication: "${nexusappid}", iqStage: 'build'

                        def nexusEval = runNexusPolicyEvaluation iqApplication: "${nexusappid}", 
                            iqTarget: "${NEXUS_ROOT_FOLDER}m2/*", 
                            svcUser: "${GIT_USERNAME}", 
                            svcPwd: "${GIT_PASSWORD}";
                        saveNexusPolicyEvaluation applicationVersion: "${VERSION}",
                            zone: 'Internal Usage - Technical Desktop',
                            iqRptId: nexusEval.get("iqRptId"),
                            svcUser: "${GIT_USERNAME}", 
                            svcPwd: "${GIT_PASSWORD}";

                        submitFossRequestForNexusPolicyEvaluation applicationVersion: "${VERSION}",
                            ignoreList: "${NEXUS_ROOT_FOLDER}m2/*",
                            svcUser: "${GIT_USERNAME}", 
                            svcPwd: "${GIT_PASSWORD}",
                            submitAll: false;

                        def nexusEval1 = runNexusPolicyEvaluation iqApplication: "${nexusappid}", 
                            iqTarget: "${NEXUS_ROOT_FOLDER}target/${ARTIFACT_ID}-${VERSION}.jar", 
                            svcUser: "${GIT_USERNAME}", 
                            svcPwd: "${GIT_PASSWORD}";
                        saveNexusPolicyEvaluation applicationVersion: "${VERSION}",
                            zone: 'Internal Usage - Technical Desktop',
                            iqRptId: nexusEval1.get("iqRptId"),
                            svcUser: "${GIT_USERNAME}", 
                            svcPwd: "${GIT_PASSWORD}";

                        submitFossRequestForNexusPolicyEvaluation applicationVersion: "${VERSION}",
                            ignoreList: "${NEXUS_ROOT_FOLDER}target/${ARTIFACT_ID}-${VERSION}.jar",
                            svcUser: "${GIT_USERNAME}", 
                            svcPwd: "${GIT_PASSWORD}",
                            submitAll: false;      
                    }
                }
            }
        }

        stage("Get Fortify Scripts"){
            when {
                allOf {
                    equals expected: "SNAPSHOT", actual: params.MAKE
                    equals expected: "YES", actual: params.DoQualityGates
                }
            }

            steps{
                getFortifyScripts()
            }
        }
        
        stage("Run Fortify Analysis"){
            when {
                allOf {
                    equals expected: "SNAPSHOT", actual: params.MAKE
                    equals expected: "YES", actual: params.DoQualityGates
                }
            }
            steps{
                echo "fortifyappid: ${fortifyappid}"
                startFortifyAnalysis('${fortifyappid}')
            }
        }

        stage('Upload Snapshot to Nexus') {
            when {
                equals expected: "SNAPSHOT", actual: params.MAKE
            }

            steps{
                cleanWs()
                unstash 'source'
                dir("${PROJECT_ROOT_FOLDER}") {
                    unstash 'settings'
                    unstash 'snapshot-jar'
                    sh "pwd; ls -ltr"
                    script {
                        STORIED_VERSION = concatenateVersionNumberIfApplicatable(VERSION, BRANCHES_EXCLUDED_FROM_APPENDS, BRANCH_NAME)
                    }
                    withMaven(jdk: 'JAVA_8', maven: 'Maven 3.3.9') {
                        sh """
                        mvn deploy:deploy-file                      \
                            -s settings.xml                         \
                            -Durl=${NEXUS_SNAPSHOT_URL}             \
                            -DrepositoryId=${SNAPSHOT_REPO}         \
                            -Dfile=${ARTIFACT_ID}-${VERSION}.jar    \
                            -Dversion=${STORIED_VERSION}-SNAPSHOT           \
                            -DpomFile=pom.xml
                        """
                    }
                    
                    sh "pwd; ls -ltr"
                }
                cleanWs()
            }
        }

        stage('Pull Snapshot from Nexus') {
            when {
                anyOf{
                    equals expected: "RELEASE", actual: params.MAKE
                    equals expected: "SNAPSHOT", actual: params.DEPLOY
                }
            }

            steps {
                cleanWs()
                sh "pwd; ls -ltr"
                downloadNexusArtifact groupId: "${GROUP_ID}",
                            artifactId: "${ARTIFACT_ID}",
                            repo: "${SNAPSHOT_REPO}",
                            release: false,
                            version: "${STORIED_VERSION}-SNAPSHOT",
                            extension: "jar"
                stash includes: "**.jar", name: "snapshot"
                sh "pwd; ls -ltr"
                cleanWs()
            }
        }

        stage('Push ReleaseCut to Nexus') {
            when {
                equals expected: "RELEASE", actual: params.MAKE
            }

            steps {
                cleanWs()
                withMaven(jdk: 'JAVA_8', maven: 'Maven 3.3.9') {
                    unstash "source"
                    dir("${PROJECT_ROOT_FOLDER}"){
                        unstash "settings"
                        unstash "snapshot"
                        sh "ls -ltr"
                        sh """
                        if [[ ! "${ARTIFACT_ID}-${STORIED_VERSION}-SNAPSHOT.jar" == "${ARTIFACT_ID}-${VERSION}-SNAPSHOT.jar" ]]; then
                            mv ${ARTIFACT_ID}-${STORIED_VERSION}-SNAPSHOT.jar ${ARTIFACT_ID}-${VERSION}-SNAPSHOT.jar
                        fi
                        ls -ltr
                        mvn deploy:deploy-file \
                            -s settings.xml \
                            -Durl=${NEXUS_RELEASE_URL} \
                            -DrepositoryId=${RELEASE_REPO} \
                            -Dfile=${ARTIFACT_ID}-${VERSION}-SNAPSHOT.jar \
                            -Dversion=${VERSION} \
                            -DpomFile=pom.xml
                        """
                    }
                }
                cleanWs()
            }     
        }

        stage('Pull ReleaseCut from Nexus') {
            when {
                equals expected: "RELEASE", actual: params.DEPLOY
            }
            
            steps {
                cleanWs()
                downloadNexusArtifact groupId: "${GROUP_ID}",
                            artifactId: "${ARTIFACT_ID}",
                            repo: "${RELEASE_REPO}",
                            release: true,
                            version: "${VERSION}",
                            extension: "jar"
                stash includes: "**.jar", name: "release-jar"
                cleanWs()
            }
        }

        stage(' Notification for Production Deployment'){
            when {
                allOf {
                    equals expected: "PRD", actual: params.DESTINATION
                    not {
                        equals expected: "NOTHING", actual: params.DEPLOY
                    }
                }
            }
            
            steps {
                notification(train: 'fun')
                echo "Notification for ${PROJECT_NAME} deployment in Production"
            }
        }

        stage('Deploy Application') {
            when {
                not {
                    equals expected: "NOTHING", actual: params.DEPLOY
                }
            }
            
            steps {
                cleanWs()
                unstash "source"
                dir("${PROJECT_ROOT_FOLDER}") {
                    unstash "install_script"
                    unstash "deploy_XMLS"
                    unstash "settings"
                    unstash params.DEPLOY == "RELEASE" ? "release-jar" : "snapshot"
                    withMaven(jdk: 'JAVA_8', maven: 'Maven 3.3.9') {
                        sshagent(credentials: ['_SystemTeam_Master_SSH_Key']) {
                            sh "ls -ltr"
                            sh "cd ../; if [[ ! -e xmldir ]] ; then  mkdir xmldir; fi;"
                            sh "ls -ltr; cp *xml ../xmldir/."
                            sh "ls -ltr ../xmldir/"
                            sh "if [[ ! -e xmldir ]] ; then  mkdir xmldir; fi;"
                            sh "ls -ltr; cp *xml xmldir/."
                            sh "ls -ltr xmldir/"
                            sh "mvn scm.plugins:scm-archive-deployment:3.0.0:distribute -U -P=${params.DESTINATION} -s settings.xml"
                        }
                    }
                }
                cleanWs() 
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}


/**
* Appends story number to version 
* @param existingVersion version number
* @param excludesRegEx regular expression to exclude from output
* @param branchName name of the current branch
* @return desired version number name 
*/
String concatenateVersionNumberIfApplicatable(String existingVersion, String excludesRegEx, String branchName){
    
    println("Starting with " + branchName)

    // Check if branchName contains any of the excludes patterns in the excludesRegEx
    Pattern pt = Pattern.compile(excludesRegEx)
    Matcher mt = pt.matcher(branchName)
    result = mt.matches()
    if(result){
        println("Branch includes anything from excludesRegEx. Returning to pipeline...")
        return existingVersion
    }
    println("Branch name does NOT include anything from excludesRegEx")

    String temp = branchName

    // Remove all of the characters up to and including the first forward slash from the temp variable
    String re = "^[^/]*/"
    temp = temp.replaceFirst(re, "")
    println("Temp after step 1: " + temp)

    // Remove all of the characters including and after the first underscore from the temp variable
    String re2 = "_.*"
    temp = temp.replaceFirst(re2, "")
    println("Temp after step 2: " + temp)

    // Remove any non-alphanumeric characters from the temp variable
    String re3 = "\\W"
    temp = temp.replaceAll(re3, "")
    println("Temp after step 3: " + temp)

    // Uppercase any lowercase characters from the temp variable
    temp = temp.toUpperCase()
    println("Temp after step 4: " + temp)

    return existingVersion + "." + temp
}
